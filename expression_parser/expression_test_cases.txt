# Format :  of comma separated values  : <text exprssion>, <value type>, <result>, [template symbol], [template value]

# numeric literals
0,double, 0
1,double,1
017,double, 17
# Max double
9223372036854775807, double, 9223372036854775807
01, double, 1
000004, double,4

# hex literals
0xA,double, 10
0XA,double, 10
0xa,double, 10
0Xa,double, 10

0X00a, double, 10
0xa + 4,double, 14


0xa * 4,double, 40
0XABC * 4, double, 10992
0XABC * (4+1),double, 13740


#double literals
150.227, double, 150.227
10.5,  double, 10.5

-000004.4456,  double, -4.4456
-+--000004.4456,  double, -4.4456
-+---000004.4456,  double, 4.4456
0000067778.2,  double, 67778.2


#Unary operators
-10, double, -10
-10.5 ,  double, -10.5
-+++++10, double, -10
-++++20.5, double,  -20.5
--15, double, 15
+15, double, 15
-13, double, -13
-+7, double, -7
--++-+---22, double, 22

# Simple operations

2+3,double, 5
2.0+3, double,  5.0
2+3.0,  double, 5.0

10+20, double, 30
10 + -20 + -+5,double,  -15
15 + -10 - +5, double, 0
4+-5, double, -1

10 + 20 - 30.123,  double, -0.123

15 + 25 - 50 + 200, double, 190
15 + 25 - 50 + 200.0,  double, 190.0

6*3,double,  18
2*3, double, 6
2.0*3, double, 6.0

15* (30), double, 450
15/30, double, 0.5
15.0/30, double, 0.5
20 * 30 / 50, double, 12
2*3*4, double, 24
2*3*4.0, double, 24.0
6/3, double, 2.0
6.0/3, double, 2.0

1/3, double, 0.33333333333
1.0/3, double, 0.33333333333
(-1.0+2)/3, double, 0.33333333333
(0.0+1)/3, double, 0.33333333333

# expressions with brackets
30 + 15 * 20, double, 330
-30 + 15 * 20, double, 270
(17 + 21) * 80, double, 3040
(17 + 21) * -80.0, double, -3040.0
-(11 + 89) * 32, double, -3200
33 * -(11 + 89), double, -3300

-((12 + 34) * 45) * 11, double, -22770
-((12.0 + 34) * 45) * 11, double, -22770.0

1 + ( 512 / 16384), double, 1.03125
1 + ( 16385 / 16384), double, 2.000061035
1 + ((16384*2 + 3) / 16384), double, 3.000183105
1 + ((16384*2.0+3) / 16384), double, 3.000183105

# modulus operations
6%2, double, 0
5%2, double, 1
100%30, double, 10
100%30.0, double, 10.0

6543.21%137, double, 104.21
6543.21%137.24, double, 92.9299999999996

6.0%3.2, double, 2.8
-6.0%3.2, double, 0.4
-6.0%-3.2, double, -2.8
6.0%-3.2, double, -0.4

12.2%4.5, double, 3.2
-12.2%4.5, double, 1.3
-12.2%-4.5, double, -3.2
12.2%-4.5, double, -1.3

5.0%0, exception

# boolean expressions

# Greater
5>2, bool, true
1>2, bool, false
4>3, bool, true
4 > 3 + 1, bool, false
5>2.0, bool, true
1.0>2.0, bool, false

# Less
4 < 3, bool, false
2 < 3, bool, true
2<(3 + 5), bool, true

# GreaterOrEqual
6>=7, bool, false
6>=4, bool, true
6>=6, bool, true
5>=2, bool, true
5>=10, bool, false
10.0>=10, bool, true
9.999999>=10, bool, false


# LessOrEqual
10<=11, bool, true
11<=11, bool, true
15<=11, bool, false
5<=2, bool, false
5<=10, bool, true
10.0<=10, bool, true
10.1<=10, bool, false


# Equal
20==11, bool, false
11==11, bool, true
9.00==10, bool, false
1==1, bool, true
1==2, bool, false
1.0==1.0, bool, true
1.0==2.0, bool, false


# NotEqual
20!=11, bool, true
11!=11, bool, false
9.00!=10, bool, true
1!=1, bool, false
1!=2, bool, true
1.0!=1.0, bool, false
1.0!=2.0, bool, true


# power expressions

2.0**4, double, 16.0
2**4.0, double, 16.0
2**3, double, 8
2**3+4, double, 12
2*2**3, double, 16
2**3*4, double, 32

4**-1, double, 0.25
1**-1/3, double, 0.33333333333
1**1/3, double, 0.33333333333
(0.0+1)/3, double, 0.33333333333
2**-2/3, double, 0.08333333333

5**3, double, 125
-5**3, double, -125
(-5)**3, double, -125
-(5)**3, double, -125
-(5**3), double, -125
-5*-5*-5,double, -125
-5.5*-5.5*-5.5,double, -166.375

-5*-5*-5*-5, double, 625
-5.5*-5.5, double, 30.25

(-5)**4, double, 625
-(5)**4, double, -625
5**4, double, 625
-5**4, double, -625
-(5**4), double, -625

5**-4, double, 0.0016
-5**-4, double, -0.0016
6-5**4, double, -619
(6-5)**4, double, 1

# ternary operations

2<(3 + 5)?4:345, double, 4
4 > 3 ? 10 : 11, double, 10
4 > 3 ? 10**2 : 11, double, 100
4 < 3 ? 10 : 3 + 5, double, 8
2+77<(3 + 5)?4:345, double, 345
4 > 3 ? 2>3 ? 1:777 : 3 + 5, double, 777

4 < 3 ? 2>3 ? 1:777 : 2<(3 + 5)?4:345, double,  4
4 < 3 ? 2>3 ? 1:777 : 2<(3 + 5)?4*1.0:345, double, 4.0

4 < 3 ? 10 : 3 + 5, double,  8
4-6?3:2, double, 3
-6?3:2, double, 3
0?3:2, double, 3
4 + 1 > 2 ? 10 : 12, double, 10
4 + (1 > 2 ? 10 : 12), double, 16

4>2?3<2:2, bool, false
1>2?3<2:2, double, 2
(40 > 40.1 ? 10 : 15)+1, double, 16
40 > 40.1 ? 10 : 15+1, double, 16
41 > 40.1 ? 10 : 15+1, double, 10
(41 > 40.1 ? 10 : 15)+1, double, 11

# for these format is slightly differen
# <text expression>, <value type>, <result>,  <template symbol>, <template value>
6%%d, double, 0, d, 2
6%%d+3, double, 3 ,d, 2
6%%d+4.1, double, 4.1, d, 2

1 + ( %d / 16384), double, 1.03125,  d, 512
1 + (%d / 16384), double, 2.000061035, d, 16385
1 + ((%d*2 + 3) / 16384), double, 3.00018310546875 , d , 16384
1 + ((%d*2.0+3) / 16384), double, 3.00018310546875, d, 16384

%d < 2 ? %d > 4 ? 45 : 30 : %d-1.0 > 4+3 ? 44: 4*3**2.0, double, 36.0, d, 3
%d < 2 ? %d > 4 ? 45 : 30 : %d-1.0 > 4+3 ? 44: 4*3**2.0, double, 30, d, 1

1/%d, double, 0.5, d, 2
1.0/%d, double, 0.5, d, 2

# negative template values
1.0/%d, double, -1 , d, -1
1.0**%d+2, double, 3 , d, -2
1 + ( %d / 16384), double, -0.46484375 , d, -24000
20.10 + ( %d * 1345)**2, double, 7236120.1 , d, -2


# no template
2+4*2, double, 10 , d, 1

1/3*3, double, 1


# Wrong expressions : expections
# <text expression>, <exception>

(), exception
abc, exception
1+a, exception
1+, exception
*, exception
0.1325.0, exception
7 * * 3, exception
0.1324.34, exception
10/0, exception

7 + * 1, exception
-7 %, exception

0x0000.1, exception
(4>3)+1, exception
(1>2)*2, exception
4 > 3 ? 10 | 11, exception
, exception
3%, exception
3+4-0x, exception
3*, exception

# division by zero
1/%d , exception

# tests cases from Python implementation
7, double, 7
1.0/%d, double, 0.25, d, 4
1.0/%d, double, 0.3333333333, d, 3
1/%f, double, 0.3333333333, f, 3
1/%d*3, double,0.999999999999, d, 3
%d, double, 11, d, 11
%d + %d, double, 22, d, 11
%d + 1, double, 12, d, 11
%d + 1.5, double, 12.5 , d, 11
%d - 1.1, double, 9.9,d, 11
%d - %d, double, 0, d, 11
-2 - %d, double, 2,d, -4
%d%5,double, 1, d, 11
%d**-1,double, 0.125,d, 8
%d**2,double, 64,d, 8
%d**2/4,double, 16, d, 8
%d**1/2.0,double, 4.5,d,  9
%d**1/2.0 + 1, double, 5.5 , d, 9
%d**(1/2),double, 3,d, 9
%d**(1/2.0), double, 3, d, 9
%d**0.5,double,3,d,9
2 ** (-%d), double, 1, d, 0
2 ** (-%d),double, 0.5, d, 1
2 ** (-%d),double, 0.25, d,  2
%d/%d,double, 1,d, 123456789
%d/3,double, 0.3333333333,d,1
%d/3.0, double,0.3333333333, d,  1
%d/4,double, 5.5, d, 22
%d/4.0,double, 5.5, d,  22
%d/4*2,double, 11, d,  22
%d/4*2.0,double, 11,d,  22
%d/(4*2),double, 2.75, d, 22
%d/(4*2.0), double, 2.75, d, 22
%d/4**2,double, 1.375, d,  22
%d/4**2.0,double, 1.375, d,  22
2*%d/8,double, 5.5, d, 22
2.0*%d/8,double, 5.5, d, 22
200*(2**%d), double, 25600, d, 7
  200   *   (    2**   %d  )    ,double, 25600,d,  7
1 + ((%d*2 + 3) / 16384),double, 1.0010375977, d, 7
1 + ((%d*2.0 + 3) / 16384), double,1.0010375977, d,  7
(1+4/2)*(2/8**-1)/(%d%8), double, 8.0,d, 38
1 + (%d / 16384),double,1.03125,d,  512
%d**-2/3,double,0.0833333333, d,  2
(-1.0 + %d)/3, double, 0.3333333333, d, 2

# negative values
5 * (%d + -32767) /32767, double,-4.9989318522, d,  7
5 * (%d + -32767) /32767, double, -5.0010681478, d, -7
-5 * (%d + -32767) /32767,double, 5.0010681478, d,  -7
-5 * (%d + -32767) /-32767, double, -5.0010681478, d, -7

# scientific notation
%d/2.133562728e+3, exception
%d/1.3682828e-3, exception

# hexadecimal
%d + 0xDEAD - 0xbeef,double, 8128, d, 2
%d * 0xDEAD / 0xbeef,double, 2.3324945273, d, 2

# ternary
%d == 2 ? 2 : 0, double, 0, d,0
%d==2?2:0,double,2,d, 2
%d == 2 ? 0 : 1,double,0,d, 2
%d >= 2 ? 7 : 11,double,7,d, 2
%d >= 2 ? 7 : 11,double, 7,d, 3
%d >= 2 ? 7 : 11,double,11,d, 1
%d <= 2 ? 7 : 11,double,7,d, 0
%d <= 2 ? 7 : 11,double,7,d, 1
%d <= 2 ? 7 : 11,double,11,d, 3
%d != 2 ? 7 : 11,double,7,d, 0
%d != 2 ? 7 : 11,double,11,d, 2
%d > 2 ? 7 : 11,double,11,d, 2
%d > 2 ? 7 : 11,double,7,d, 3
%d < 2 ? 7 : 11,double,7,d, 1
%d < 2 ? 7 : 11,double,11,d, 2
%d < 3 ? 2**%d : 3,double,0.5,d, -1
%d < 3 ? 2**%d : 3,double,2,d, 1
%d < 3 ? 2**%d : 3, double,4, d, 2

%d > %d**-1 ? 2**%d : 3, double, 4, d, 2
%d < %d**-1 ? 2**%d : 3,double,3,d, 2

%d < 3 ? %d > 1 ? 5 : 6 : 4,double,5, d, 2
%d < 3 ? %d > 1 ? 5 : 6 : 4,double,4, d, 3
%d < 3 ? %d > 1 ? 5 : 6 : 4,double,6, d, 1
%d < 2 ? %d > 4 ? 45 : 30 : %d-1.0 > 4+3 ? 44: 4*3**2.0,double, 30, d, 1
%d < 2 ? %d > 4 ? 45 : 30 : %d-1.0 > 4+3 ? 44: 4*3**2.0,double, 36, d, 2
%d < 2 ? %d > 4 ? 45 : 30 : %d-1.0 > 4+3 ? 44: 4*3**2.0,double, 44, d, 9

#functions
log(100), double, 4.605170
log10(100), double, 2
log2(100), double, 6.644
log2(log10(45)), double, 0.72527218
log10(log2(log(123456))), double, 0.5503933144

#log(0), double, -inf
#log10(0), double, -inf
#log2(0), double, -inf

# invalid
%d dogfishcat, exception
2 + * / = <, exception
2 $ 2, exception
2 + 1 */ 3, exception
2 + 1 /, exception
* 2, exception
2 < 3 ? 16/4 2 > 1 ? 5 : 6, exception
2 < 3 16/4 : 2 > 1 ? 5 : 6, exception
2 <= 2 ? 7 : : 11, exception
1 <= 2 ? 7 : * 11, exception
1 <= *2 ? 7 : 11, exception
0xFF & 0xF, exception
0xF0 | 0xF, exception
0x3C ^ 0xD, exception
~0xF, exception
~0xFF, exception
